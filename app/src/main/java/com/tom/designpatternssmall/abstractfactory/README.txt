模式的定义
    为创建一组相关或相互依赖的对象提供一个接口，而无需指定它们具体的类。

使用场景
    一个对象族或者一组没有任何关系的对象都有相同的约束，都可以使用抽象工厂模式(工厂方法模式是
    一个具体工厂创建一个类型的对象，抽象工厂模式是一个具体工厂创建一个产品族或者一系列的产品对象)。
    例如一个文本编辑器和一个图片处理器都是软件，但是Mac下的文本编辑器和 Windows 下的文本编辑器虽然
    功能和界面都相同，但是代码实现是不同的，图片处理软件也有类似情况。
    也就是具有了共同的约束条件：操作系统类型。
    于是我们可以使用抽象工厂模式，产生不同操作系统下的编辑器和图像浏览器。

优点与缺点
优点 :
1、抽象工厂模式隔离了具体类的生产，使得客户并不需要知道什么被创建；
2、容易改变产品的系列；
3、增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。
4、将一个系列的产品族统一到一起创建，客户代码易于使用。

缺点 :
    抽象工厂模式的最大缺点就是产品族扩展非常困难，为什么这么说呢？我们以通用代码为例，如果要增加一个产品 C，
     也就是说产品家族由原来的 2 个增加到 3 个，看看我们的程序有多大改动吧！抽象类 AbstractCreator 要增加一个
     方法 createProductC()， 然后两个实现类都要修改，想想看，这严重违反了开闭原则，而且我们一直说明抽象类和
     接口是一个契约。