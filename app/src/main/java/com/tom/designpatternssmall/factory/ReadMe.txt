模式的定义
定义一个用户创建对象的接口，让子类决定将哪一个类实例化。工厂方法使一个类的实例化延迟到子类。

使用场景
1、需要使用工厂替代new的场景(创建对象有较多重复的代码)；
2、需要隐藏具体实现，并且使抽象与实现解耦合；
3、需要灵活、可扩展的框架，且具体类型不多时。


优点与缺点
优点
1、多态性：客户代码可以做到与特定应用无关，适用于任何实体类
子类可以重新新的实现，也可以继承父类的实现。加一层间接性，增加了灵活性。
2、良好的封装性，代码结构清晰。扩展性好，在增加产品类的情况下，只需要适当修改具体的工厂类或扩展一个工厂类，就可“拥抱变化”屏蔽产品类。3、产品类的实现如何变化，调用者不需要关心，只需要关心产品的接口，只要接口保持不变，系统的上层模块就不会发生变化。
4、耦合度低，高层模块只需要知道产品的抽象类，其他的实现都不需要关心。

缺点
1、需要Creator和相应的子类作为factory method的载体，如果应用模型确实需要creator和子类存在，则很好；否则的话，需要增加一个类层次。