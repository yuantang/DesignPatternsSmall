模式的定义
	用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。

使用场景
1、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等，通过原型拷贝避免这些消耗；
2、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式；
3、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。

角色介绍
Client  :  客户端用户。
Prototype : 抽象类或者接口，声明具备clone能力。
ConcretePrototype : 具体的原型类.

简单示例
	下面我们以简单的文档拷贝为例来演示一下简单的原型模式模式。

	AAndroid源码中intent。clone()方法这就和C++中的拷贝构造函数完全一致了，而且是深拷贝。

	优点与缺点
    优点 ：
    1、原型模式是在内存二进制流的拷贝，要比直接 new 一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好地体现其优点。

    缺点 ：
    1、这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的，在实际开发当中应该注意这个潜在的问题。优点就是减少了约束，缺点也是减少了约束，需要大家在实际应用时考虑。